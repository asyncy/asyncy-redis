oms: 1
info:
  version: 1.0.1
  title: Redis
  description: This is a redis service
  contact:
    name: Open Microservices
    url: 'https://openmicroservices.org'
    email: core@openmicroservices.org
lifecycle:
  startup:
    command:
      - /bin/sh
      - /app/start.sh
volumes:
  db:
    target: /db
    persist: true
health:
  http:
    path: /health
    port: 8000
actions:
  set:
    help: Sets 'key' to hold 'value'.
    http:
      path: /set
      port: 8000
      method: post
      contentType: application/json
    arguments: &ref_0
      key:
        type: string
        in: requestBody
        required: true
      value:
        type: any
        in: requestBody
        required: true
    output: &ref_1
      type: none
  rpush:
    help: Insert 'value' at the end of list stored at 'key'.
    http:
      path: /rpush
      port: 8000
      method: post
      contentType: application/json
    arguments: *ref_0
    output: *ref_1
  lpush:
    help: Insert 'value' at the head of list stored at 'key'.
    http:
      path: /lpush
      port: 8000
      method: post
      contentType: application/json
    arguments: *ref_0
    output: *ref_1
  lpop:
    help: Removes and returns the first element of the list stored at 'key'.
    http:
      path: /lpop
      port: 8000
      method: post
      contentType: application/json
    arguments: &ref_2
      key:
        type: string
        in: requestBody
        required: true
    output:
      type: any
  rpop:
    help: Removes and returns the last element of the list stored at 'key'.
    http:
      path: /rpop
      port: 8000
      method: post
      contentType: application/json
    arguments: *ref_2
    output:
      type: any
  blpop:
    help: |
      Removes and returns the first element of the list stored at 'key'.
      When there are no element in the list, the command will not return
      until an element got added.
    http:
      path: /blpop
      port: 8000
      method: post
      contentType: application/json
    arguments: *ref_2
    output:
      type: any
  brpop:
    help: |
      Removes and returns the last element of the list stored at 'key'.
      When there are no element in the list, the command will not return
      until an elements got added.
    http:
      path: /brpop
      port: 8000
      method: post
      contentType: application/json
    arguments: *ref_2
    output:
      type: any
  delete:
    help: Removes 'key'.
    http:
      path: /del
      port: 8000
      method: post
      contentType: application/json
    arguments: *ref_2
    output:
      type: none
  get:
    help: Returns the value of 'key'.
    http:
      path: /get
      port: 8000
      method: post
      contentType: application/json
    arguments: *ref_2
    output:
      type: string
  mget:
    help: Returns the values of multiple 'keys'.
    http:
      path: /get
      port: 8000
      method: post
      contentType: application/json
    arguments:
      keys:
        in: requestBody
        type: list
    output:
      type: list
  increment:
    help: Increments a number stored at 'key'.
    http:
      path: /incr
      port: 8000
      method: post
      contentType: application/json
    arguments:
      key:
        type: string
        in: requestBody
        required: true
      by:
        in: requestBody
        type: int
    output:
      type: int
  decrement:
    help: Decrements a number stored at 'key'.
    http:
      path: /decr
      port: 8000
      method: post
      contentType: application/json
    arguments:
      key:
        type: string
        in: requestBody
        required: true
      by:
        in: requestBody
        type: int
    output:
      type: int
  append:
    help: Appends 'value' to a 'key'.
    http:
      path: /append
      port: 8000
      method: post
      contentType: application/json
    arguments: *ref_0
    output:
      type: int
  getSet:
    help: Returns the current value of 'key' and overwrites it with 'value'.
    http:
      path: /getset
      port: 8000
      method: post
      contentType: application/json
    arguments: *ref_0
    output:
      type: string
  setnx:
    help: Set a 'key' to 'value' only if the key does not exist yet.
    http:
      path: /setnx
      port: 8000
      method: post
      contentType: application/json
    arguments: *ref_0
    output:
      type: boolean
  mset:
    http:
      path: /mset
      port: 8000
      method: post
      contentType: application/json
    help: Sets multiple 'key'/'value' pairs simultaneously.
    arguments:
      pairs:
        in: requestBody
        type: map
    output:
      type: none
  msetnx:
    http:
      path: /msetnx
      port: 8000
      method: post
      contentType: application/json
    help: |
      Sets multiple 'key'/'value' pairs simultaneously.
      Only non-existing keys will be set.
    arguments:
      pairs:
        in: requestBody
        type: map
    output:
      type: boolean
  expire:
    http:
      path: /expire
      port: 8000
      method: post
      contentType: application/json
    help: Set a timeout on a 'key'.
    arguments:
      key:
        type: string
        in: requestBody
        required: true
      seconds:
        in: requestBody
        type: int
        required: true
    output:
      type: none
  listener:
    events:
      rpop:
        help: 'RPOP a key constantly, and emit the values as events'
        http:
          port: 8000
          subscribe: &ref_3
            path: /listener/add
            method: post
          unsubscribe: &ref_4
            path: /listener/remove
            method: post
        arguments:
          key:
            type: string
            required: true
            in: requestBody
            help: The key to RPOP
        output:
          type: any
      lpop:
        help: 'LPOP a key constantly, and emit the values as events'
        http:
          port: 8000
          subscribe: *ref_3
          unsubscribe: *ref_4
        arguments:
          key:
            type: string
            required: true
            in: requestBody
            help: The key to LPOP
        output:
          type: any
environment:
  REDIS_HOST:
    type: string
  REDIS_PORT:
    type: int
  REDIS_DB:
    type: string
  REDIS_PASSWORD:
    type: string
