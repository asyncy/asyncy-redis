omg: 1
lifecycle:
  startup:
    command: ["/bin/sh", "/app/start.sh"] 
info:
  version: 1.0.1
  title: Redis
  description: This is a redis service
volumes:
  db:
    target: /db
    persist: true
actions:
  set: &key_value_required
    http: &http
      path: /set
      port: 8000
      method: post
      contentType: application/json
    arguments:
      key: &key
        type: string
        in: requestBody
        required: true
      value: &value
        type: any
        in: requestBody
        required: true
    output:
      type: object
      properties:
        status:
          type: string
  rpush:
    <<: *key_value_required
    http:
      <<: *http
      path: /rpush
  lpush:
    <<: *key_value_required
    http:
      <<: *http
      path: /lpush
  lpop: &key_required
    http:
      <<: *http
      path: /lpop
    arguments:
      key:
        <<: *key
    output:
      type: object
      properties:
        result:
          type: any
        status:
          type: string
  rpop:
    <<: *key_required
    http:
      <<: *http
      path: /rpop
    output:
      type: object
      properties:
        result:
          type: any
        status:
          type: string
  blpop:
    <<: *key_required
    http:
      <<: *http
      path: /blpop
    output:
      type: object
      properties:
        result:
          type: any
        status:
          type: string
  brpop:
    <<: *key_required
    http:
      <<: *http
      path: /brpop
    output:
      type: object
      properties:
        result:
          type: any
        status:
          type: string
  del:
    <<: *key_required
    http:
      <<: *http
      path: /del
    output:
      type: object
      properties:
        status:
          type: string
  get:
    <<: *key_required
    http:
      <<: *http
      path: /get
    output:
      type: object
      properties:
        result:
          type: any
        status:
          type: string
  expire:
    http:
      <<: *http
      path: /expire
    arguments:
      key:
        <<: *key
      seconds:
        in: requestBody
        type: int
        required: true
    output:
      type: object
      properties:
        status:
          type: string
  listener:
    events:
      rpop:
        help: RPOP a key constantly, and emit the values as events
        http: &rpop_http
          port: 8000
          subscribe:
            path: /listener/add
            method: post
          unsubscribe:
            path: /listener/remove
            method: post
        arguments:
          key:
            type: string
            required: true
            in: requestBody
            help: The key to RPOP
        output:
          type: object
          properties:
            result:
              type: any
            status:
              type: string
      lpop:
        help: LPOP a key constantly, and emit the values as events
        http:
          <<: *rpop_http
        arguments:
          key:
            type: string
            required: true
            in: requestBody
            help: The key to LPOP
        output:
          type: object
          properties:
            result:
              type: any
            status:
              type: string

environment:
  REDIS_HOST:
    type: string
  REDIS_PORT:
    type: int
  REDIS_DB:
    type: string
  REDIS_PASSWORD:
    type: string
