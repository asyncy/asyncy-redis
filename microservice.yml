omg: 1
lifecycle:
  startup:
    command: ["/bin/sh", "/app/start.sh"]
info:
  version: 1.0.1
  title: Redis
  description: This is a redis service
volumes:
  db:
    target: /db
    persist: true
health:
  http:
    path: /health
    port: 8000
actions:
  set: &key_value_required
    help: Sets 'key' to hold 'value'.
    http: &http
      path: /set
      port: 8000
      method: post
      contentType: application/json
    arguments:
      key: &key
        type: string
        in: requestBody
        required: true
      value: &value
        type: any
        in: requestBody
        required: true
    output:
      type: none
  rpush:
    <<: *key_value_required
    help: Insert 'value' at the end of list stored at 'key'.
    http:
      <<: *http
      path: /rpush
  lpush:
    <<: *key_value_required
    help: Insert 'value' at the head of list stored at 'key'.
    http:
      <<: *http
      path: /lpush
  lpop: &key_required
    help: Removes and returns the first element of the list stored at 'key'.
    http:
      <<: *http
      path: /lpop
    arguments:
      key:
        <<: *key
    output:
      type: any
  rpop:
    <<: *key_required
    help: Removes and returns the last element of the list stored at 'key'.
    http:
      <<: *http
      path: /rpop
    output:
      type: any
  blpop:
    <<: *key_required
    help: |
      Removes and returns the first element of the list stored at 'key'.
      When there are no element in the list, the command will not return
      until an element got added.
    http:
      <<: *http
      path: /blpop
    output:
      type: any
  brpop:
    <<: *key_required
    help: |
      Removes and returns the last element of the list stored at 'key'.
      When there are no element in the list, the command will not return
      until an elements got added.
    http:
      <<: *http
      path: /brpop
    output:
      type: any
  delete:
    <<: *key_required
    help: Removes 'key'.
    http:
      <<: *http
      path: /del
    output:
      type: none
  get:
    <<: *key_required
    help: Returns the value of 'key'.
    http:
      <<: *http
      path: /get
    output:
      type: string
  mget:
    help: Returns the values of multiple 'keys'.
    http:
      <<: *http
      path: /get
    arguments:
      keys:
        in: requestBody
        type: list
    output:
      type: list
  increment:
    help: Increments a number stored at 'key'.
    http:
      <<: *http
      path: /incr
    arguments:
      key:
        <<: *key
      by:
        in: requestBody
        type: int
    output:
      type: int
  decrement:
    help: Decrements a number stored at 'key'.
    http:
      <<: *http
      path: /decr
    arguments:
      key:
        <<: *key
      by:
        in: requestBody
        type: int
    output:
      type: int
  append:
    <<: *key_value_required
    help: Appends 'value' to a 'key'.
    http:
      <<: *http
      path: /append
    output:
      type: int
  getSet:
    <<: *key_value_required
    http:
      <<: *http
      path: /getset
    help: Returns the current value of 'key' and overwrites it with 'value'.
    output:
      type: string
  setnx:
    <<: *key_value_required
    http:
      <<: *http
      path: /setnx
    help: Set a 'key' to 'value' only if the key does not exist yet.
    output:
      type: boolean
  mset:
    http:
      <<: *http
      path: /mset
    help: Sets multiple 'key'/'value' pairs simultaneously.
    arguments:
      pairs:
        in: requestBody
        type: map
    output:
      type: none
  msetnx:
    http:
      <<: *http
      path: /msetnx
    help: |
      Sets multiple 'key'/'value' pairs simultaneously.
      Only non-existing keys will be set.
    arguments:
      pairs:
        in: requestBody
        type: map
    output:
      type: boolean
  expire:
    http:
      <<: *http
      path: /expire
    help: Set a timeout on a 'key'.
    arguments:
      key:
        <<: *key
      seconds:
        in: requestBody
        type: int
        required: true
    output:
      type: none
  listener:
    events:
      rpop:
        help: RPOP a key constantly, and emit the values as events
        http: &rpop_http
          port: 8000
          subscribe:
            path: /listener/add
            method: post
          unsubscribe:
            path: /listener/remove
            method: post
        arguments:
          key:
            type: string
            required: true
            in: requestBody
            help: The key to RPOP
        output:
          type: any
      lpop:
        help: LPOP a key constantly, and emit the values as events
        http:
          <<: *rpop_http
        arguments:
          key:
            type: string
            required: true
            in: requestBody
            help: The key to LPOP
        output:
          type: any

environment:
  REDIS_HOST:
    type: string
  REDIS_PORT:
    type: int
  REDIS_DB:
    type: string
  REDIS_PASSWORD:
    type: string
